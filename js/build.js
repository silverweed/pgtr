// Generated by IcedCoffeeScript 108.0.11

/*
	Functions that build the scene
 */

(function() {
  'use strict';
  var addAll, asyncBuildScene, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  addAll = function(scene, entities, physics, objects) {
    var obj, _i, _len;
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      obj = objects[_i];
      scene.add(obj);
      entities.add(obj.name, obj);
      if (obj.physics) {
        physics.addRigidBody(obj, obj.physicsOpts);
      }
    }
    return null;
  };

  asyncBuildScene = function(cb) {
    var camera, controls, cubemap, entities, models, objects, ocean, pPlane, pPlaneWater, physics, player, renderer, scene, sky, textures, water, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    scene = create('Scene');
    scene.fog = create('FogExp2', CONF.FOG.COLOR, CONF.FOG.DENSITY);
    l("In buildScene(" + scene + ")");
    camera = create('PerspectiveCamera', 60, windowRatio(), 1, 100000).at(0, 10, -30).then('rotateY', Math.PI).then('rotateX', -0.3);
    controls = create('OrbitControls', camera);
    renderer = create('WebGLRenderer', {
      antialias: true
    }).then('setSize', window.innerWidth, window.innerHeight).then('setPixelRatio', window.devicePixelRatio);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/jacktommy/jack/inf/pgtr/proj/src/build.iced"
        });
        asyncLoadTexturesAndModels(['shark', 'white', 'black'], ['shark'], __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              textures = arguments[0];
              return models = arguments[1];
            };
          })(),
          lineno: 33
        }));
        asyncLoadSkybox(CONF.SKYBOX.URLS, CONF.SKYBOX.SIZE, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              sky = arguments[0];
              return cubemap = arguments[1];
            };
          })(),
          lineno: 34
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        objects = SCENE.create({
          envMap: cubemap
        });
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/jacktommy/jack/inf/pgtr/proj/src/build.iced"
          });
          asyncLoadOcean(CONF.OCEAN.URL, renderer, camera, scene, objects.sunlight, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                water = arguments[0];
                return ocean = arguments[1];
              };
            })(),
            lineno: 39
          }));
          asyncLoadPlayerPlane(CONF.OCEAN.URL, renderer, camera, scene, objects.sunlight, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                pPlaneWater = arguments[0];
                return pPlane = arguments[1];
              };
            })(),
            lineno: 40
          }));
          __iced_deferrals._fulfill();
        })(function() {
          entities = Entities["new"](scene);
          player = objects.player;
          l("player name = " + player.name);
          player.add(camera);
          player.plane = pPlane;
          player.planeWater = pPlaneWater;
          physics = new Physics();
          addAll(scene, entities, physics, [sky, ocean, pPlane, player].concat(__slice.call(objects.objects)));
          return cb({
            scene: scene,
            water: water,
            camera: camera,
            renderer: renderer,
            clock: create('Clock'),
            entities: entities,
            objects: objects,
            physics: physics,
            controls: controls
          });
        });
      };
    })(this));
  };

  window.asyncBuildScene = asyncBuildScene;

}).call(this);
