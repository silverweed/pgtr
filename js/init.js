// Generated by IcedCoffeeScript 108.0.11
(function() {
  'use strict';
  var createDOM, iced, requireWebgl, world, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  requireWebgl = function() {
    if (!Detector.webgl) {
      Detector.addGetWebGLMessage();
      false;
    }
    return true;
  };

  createDOM = function() {
    var child, children, container, _i, _len;
    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    container = document.createElement('div');
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      child = children[_i];
      container.appendChild(child);
    }
    document.body.appendChild(container);
    return container;
  };


  /* "Main" */

  if (!requireWebgl()) {
    return;
  }

  l('Starting program');

  (function(_this) {
    return (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        filename: "/home/jacktommy/jack/inf/pgtr/proj/src/init.iced"
      });
      asyncBuildScene(create('Scene'), __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return world = arguments[0];
          };
        })(),
        lineno: 21
      }));
      __iced_deferrals._fulfill();
    });
  })(this)((function(_this) {
    return function() {
      world.stats = createStats();
      world.debug = [createSunlightControls(world.objects.sunlight), createTogglePhysicsControls(world.physics)];
      createDOM(world.renderer.domElement, world.stats.domElement);
      return renderLoop(world);
    };
  })(this));

}).call(this);
