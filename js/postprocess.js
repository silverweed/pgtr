// Generated by IcedCoffeeScript 108.0.11
(function() {
  'use strict';
  var iced, init, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  init = function(world, scene, camera, cb) {
    var depthShader, dld, fogfrag, fogvert, ppScene, target, tcomposer, toonLighting, toonfrag, toonvert, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/air/Documents/pgtr/src/postprocess.iced"
        });
        asyncLoadShader("toonshading.vert", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return toonvert = arguments[0];
            };
          })(),
          lineno: 4
        }));
        asyncLoadShader("toonshading.frag", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return toonfrag = arguments[0];
            };
          })(),
          lineno: 5
        }));
        asyncLoadShader("depthfog.vert", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return fogvert = arguments[0];
            };
          })(),
          lineno: 6
        }));
        asyncLoadShader("depthfog.frag", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return fogfrag = arguments[0];
            };
          })(),
          lineno: 7
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        toonLighting = create("ShaderMaterial", {
          uniforms: {
            nBands: {
              value: 3
            },
            directionalLightDirection: {
              value: (world.objects.sunlight.target.position.sub(world.objects.sunlight.position)).normalize()
            },
            directionalLightColor: {
              value: world.objects.sunlight.color
            },
            directionalLightIntensity: {
              value: 0.5
            }
          },
          vertexShader: toonvert,
          fragmentShader: toonfrag
        });
        dld = toonLighting.uniforms.directionalLightDirection.value;
        console.assert(typeof dld.x === 'number' && !isNaN(dld.x), "directionalLightDirection = " + dld.x + ", " + dld.y + ", " + dld.z);
        target = create("WebGLRenderTarget", window.innerWidth, window.innerHeight);
        target.depthBuffer = true;
        target.depthTexture = create("DepthTexture");
        depthShader = create("ShaderMaterial", {
          uniforms: {
            renderedScene: {
              value: target.texture
            },
            depthTexture: {
              value: target.depthTexture
            },
            fogColor: {
              value: create("Vector4", 0.7, 0.7, 0.7, 1.0)
            },
            frustumLength: {
              value: world.camera.far - world.camera.near
            },
            minVisionDepth: {
              value: 0.2
            },
            maxVisionDepth: {
              value: 1.0
            }
          },
          vertexShader: fogvert,
          fragmentShader: fogfrag
        });
        ppScene = {};
        ppScene.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
        ppScene.scene = new THREE.Scene();
        ppScene.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
        ppScene.quad.frustumCulled = false;
        ppScene.quad.material = depthShader;
        ppScene.scene.add(ppScene.quad);
        tcomposer = {
          ppScene: ppScene,
          renderer: world.renderer,
          render: function(sc, cam) {
            tcomposer.renderer.render(sc, cam, target);
            tcomposer.renderer.render(ppScene.scene, ppScene.camera);
            return null;
          }
        };
        return cb({
          composer: tcomposer,
          overrideMaterial: toonLighting
        });
      };
    })(this));
  };

  window.asyncPostProcessInit = init;

}).call(this);
