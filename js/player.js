// Generated by IcedCoffeeScript 108.0.11

/*
	Functions for moving the player etc
 */

(function() {
  'use strict';
  var createPlayer, updatePlayer;

  createPlayer = function(object) {
    var player;
    player = Object.create(object, {
      speed: {
        value: CONF.PLAYER.SPEED,
        writable: true,
        enumerable: true
      },
      update: {
        value: updatePlayer,
        writable: false,
        enumerable: false
      },
      tSinceJump: {
        value: 2,
        writable: true,
        enumerable: false
      }
    });
    return player;
  };

  updatePlayer = function(deltaTime) {
    var fwd, q, right, v;
    fwd = Input.forward - Input.backward;
    if (fwd > 0 || fwd < 0) {
      this.rigidbody.activate();
      v = new Ammo.btVector3(0, 0, this.speed * fwd);
      q = this.rigidbody.getWorldTransform().getRotation();
      v.rotate(new Ammo.btVector3(0, 1, 0), q.angle);
      this.rigidbody.applyCentralForce(new Ammo.btVector3(v.x, v.y, v.z));
    }
    right = Input.right - Input.left;
    if (right > 0 || right < 0) {
      this.rigidbody.activate();
      this.rigidbody.applyTorque(new Ammo.btVector3(0, this.speed * right, 0));
      q = this.rigidbody.getWorldTransform().getRotation();
      l("rot = " + (q.x()) + ", " + (q.y()) + ", " + (q.z()) + ", " + (q.w()));
    }
    this.tSinceJump += deltaTime;
    if (Input.jump && this.tSinceJump > 1) {
      this.rigidbody.activate();
      this.rigidbody.applyCentralImpulse(new Ammo.btVector3(0, 0, -CONF.PLAYER.JUMP_FORCE));
      return this.tSinceJump = 0;
    }
  };

  window.createPlayer = createPlayer;

}).call(this);
