// Generated by IcedCoffeeScript 108.0.11

/*
	Functions for moving the player etc
 */

(function() {
  'use strict';
  var createPlayer, updatePlayer;

  createPlayer = function(object) {
    var player;
    player = Object.create(object, {
      speed: {
        value: CONF.PLAYER.SPEED,
        writable: true,
        enumerable: true
      },
      update: {
        value: updatePlayer,
        writable: false,
        enumerable: false
      }
    });
    return player;
  };

  updatePlayer = function(deltaTime) {
    var f, fwd, p, q, right, _ref, _ref1, _ref2, _ref3, _ref4;
    this.canJump = this.position.y < 2.2;
    fwd = ((_ref = Input.forward) != null ? _ref : 0) - ((_ref1 = Input.backward) != null ? _ref1 : 0);
    if (fwd > 0 || fwd < 0) {
      this.rigidbody.activate();
      q = this.rigidbody.getWorldTransform().getRotation();
      p = new Ammo.btQuaternion(0, 1, 0, 0);
      p.setRotation(q.getAxis(), q.getAngle() * 2);
      f = p.op_mul(this.speed * fwd);
      this.rigidbody.applyCentralForce(new Ammo.btVector3(f.y(), f.z(), f.w()));
    }
    right = ((_ref2 = Input.right) != null ? _ref2 : 0) - ((_ref3 = Input.left) != null ? _ref3 : 0);
    if (right > 0 || right < 0) {
      this.rigidbody.activate();
      this.rigidbody.applyTorque(new Ammo.btVector3(0, this.speed * -right, 0));
      q = this.rigidbody.getWorldTransform().getRotation();
    }
    if (Input.jump && this.canJump) {
      this.rigidbody.activate();
      this.rigidbody.applyCentralImpulse(new Ammo.btVector3(0, CONF.PLAYER.JUMP_FORCE, 0));
      this.canJump = false;
    }
    return (_ref4 = this.plane) != null ? _ref4.position.set(this.position.x, this.plane.position.y, this.position.z) : void 0;
  };

  window.createPlayer = createPlayer;

}).call(this);
